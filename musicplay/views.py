from .models import *from django.shortcuts import render, get_list_or_404, get_object_or_404from django.views import genericfrom django.views.generic.edit import CreateView, UpdateView, DeleteViewfrom django.db.models import Qfrom django.core.urlresolvers import reverse_lazyfrom .filters import Songfilterdef indexview(request):    all_songs = Song.objects.all()    context = {'all_songs': all_songs}    return render(request, 'musicplay/index.html', context )def songsview(request):    all_songs = get_list_or_404(Song)    context = {'all_songs': all_songs }    return render(request, 'musicplay/songs.html',context )def albumsview(request):    all_albums = get_list_or_404(Album)    context = {'all_albums': all_albums }    return render(request, 'musicplay/albums.html',context )class SongDetailView(generic.DetailView):    template_name = 'musicplay/songdetail.html'    context_object_name = 'songdetails'    model = Songdef AlbumDetailView(request, pk):    albumdetails = get_object_or_404(Album, pk=pk)    albumsongs = Song.objects.filter(album=pk)    context = {'albumdetails': albumdetails, 'albumsongs': albumsongs}    return render(request, 'musicplay/albumdetail.html', context)class SongCreate(CreateView):    model = Song    fields = ['song_title','artiste','album','genre','release_year','rating','song_file','song_art']class AlbumCreate(CreateView):    model = Album    fields = ['album_title','artiste','genre','release_year','rating','album_art']class SongUpdate(UpdateView):    model = Song    fields = ['song_title','artiste','album','genre','release_year','rating','song_file','song_art']class SongDelete(DeleteView):    model = Song    success_url = reverse_lazy('musicplay:index')class AlbumUpdate(UpdateView):    model = Album    fields = ['album_title','artiste','genre','release_year','rating','album_art']class AlbumDelete(DeleteView):    model = Album    success_url = reverse_lazy('musicplay:index')def search(request):    songs = Song.objects.all()    song_filter = Songfilter(request.GET, queryset=songs)    context= {'filter': song_filter}    return render(request, 'musicplay/search.html', context)#####Widget Context Processor#####def widgetview(request):    queryset1 = Song.objects.filter(Q(rating='5 STAR')|Q(rating='4 STAR')|Q(rating='3 STAR'))    queryset2 = Album.objects.filter(Q(rating='5 STAR') | Q(rating='4 STAR') | Q(rating='3 STAR'))    queryset3 = Song.objects.all().order_by('-pk')    context = {'latestsongs':queryset3, 'songtopratings': queryset1, 'albumtopratings': queryset2, '5star': range(5), '4star': range(4), '3star': range(3) }    return context#----------------------DJANGO REST API-----------------#from rest_framework.views import APIViewfrom rest_framework.response import Responsefrom .serializer import SongSerializerfrom rest_framework.generics import RetrieveAPIViewclass songs_list_api(APIView):    def get(self,request):        songs = Song.objects.all()        serializer = SongSerializer(songs, many=True)        return Response(serializer.data)class songs_detail_api(RetrieveAPIView):    queryset = Song.objects.all()    serializer_class = SongSerializer